



List-Comprehension (filtering)
-----------------------------
ghci> [x*2 | x <- [1..10]]  
[2,4,6,8,10,12,14,16,18,20] 

let's add a condition (or a predicate). Predicates go after the binding parts and are separated from them by a comma.
ghci> [x*2 | x <- [1..10], x*2 >= 12]  
[12,14,16,18,20] 

ghci> [ x | x <- [50..100], x `mod` 7 == 3]  
[52,59,66,73,80,87,94] 

boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]  
-> nur wenn Prädikat (odd x) True liefert wird ausgewärtet.

ghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]  
[16,20,22,40,50,55,80,100,110]   

ghci> [ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]  
[55,80,100,110] 

length' xs = sum [1 | _ <- xs]

removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]

ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]  
ghci> [ [ x | x <- xs, even x ] | xs <- xxs]  
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]  



Tuples (every Tuble has its own type length)
--------------------------------------------
Nützlich wenn von Anfang an klar ist wie viele Elemente benötigt werden. Typen auch mixbar.
fst (works only on Tuples, not on Tripples etc...)
snd (works only on Tuples, not on Tripples etc...)
ghci> zip [1,2,3,4,5] [5,5,5,5,5]  
[(1,5),(2,5),(3,5),(4,5),(5,5)]  
ghci> zip [1 .. 5] ["one", "two", "three", "four", "five"]  
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")] 



Operatoren
----------
:: is read as "has type of".
:: type annotations (zum einen Typ assignen)
: cons-Operator -> etwas an den Anfang einer Liste setzten.
!! Extractor
->
=> Typenklassen Beschränker


Types and Typeclasses
---------------------
addThree :: Int -> Int -> Int -> Int  
addThree x y z = x + y + z  
-> addTree has type of Int (addThree :: Int)
-> takes three Int Parameters and returns 1 Int (Int -> Int -> Int -> Int)

 ** Typenvariable (z.B. a )**
ghci> :t head  
head :: [a] -> a  (die Typenvariable a kann jeden Typ annaehmen. Hier heisst dies:
nimmt Liste von einem belibigen Typ und gib ein beliebiges Element zurück)

 ** Typenklassen (Interfaces)**
ghci> :t (==)  
(==) :: (Eq a) => a -> a -> Bool
=> separates two parts of a type signature:
On the left, typeclass constraints
On the right, the actual type

Eq (==, /=)
Ord (>, <, >=, <=) 
Ordering (GT, LT or EQ)

Enum members (sind sortiert z.B. [1..10])
Bounded members have an upper and lower bound z.B.:
	minBound :: Int
	maxBound :: Int
Num is a numeric typeclass.
Integral
Floating

fromIntegral (length [1,2,3,4]) + 3.2


Pattern matching
----------------
- Specify the most specific patterns first and then the more general ones later.

- Always include a catch-all pattern so that the program doesn't crash
  if we get some unexpected input.

- Lists themselves can also be used in pattern matching:
ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]  
ghci> [a+b | (a,b) <- xs]  
[4,7,6,8,11,4] 

- A pattern like x:xs will bind the head of the list to x and the rest of it to xs,
  even if there's only one element so xs ends up being an empty list.

- There's also a thing called as patterns:
capital :: String -> String  
capital "" = "Empty string, whoops!"  
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x] 
ghci> capital "Dracula"  
"The first letter of Dracula is D"

-  You can't use ++ in pattern matches.



Guards, where, let
------------------
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
  | bmi <= skinny = "You're underweight, you emo, you!"  
  | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"  
  | bmi <= fat    = "You're fat! Lose some weight, fatty!"  
  | otherwise     = "You're a whale, congratulations!"  
  where bmi = weight / height ^ 2 -- where variables only visible within function
    skinny = 18.5
    normal = 25.0
    fat = 30.0

- The form is let <bindings> in <expression>.
cylinder :: (RealFloat a) => a -> a -> a  
cylinder r h = 
    let sideArea = 2 * pi * r * h  
        topArea = pi * r ^2  
    in  sideArea + 2 * topArea  

ghci> (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)  
(6000000,"Hey there!")



Function
--------
replicate

- Bei Funktionsdefinierung wird auf der rechten Seite definiert was passiert.
- bar (bar 3) -> bedeutet, zuerst wird bar 3 aufgerufen, um ein Zahl zu bekommen, und dann wird bar
   mit dieser Zahl aufgerufen.

product [2..10]

$ ist semantisch ein Space (Bindungsstärke)

Palidrome = "ABBA"

p = Predikat (lieferert einen Wahrheitswert zurück)

where = wobei gilt...

(+1)   =   + ist eine Funktion die schon die 1 mitnimmt.

List Comprehensions  Mehrere Generatoren mit Komma separiert


Case expressions
----------------
head' :: [a] -> a  
head' xs = case xs of [] -> error "No head for empty lists!"  
                      (x:_) -> x  


Curried Functions
-----------------
take more than one parameter and passes it to the next function.
Putting a space between two things is simply function application.
The space is sort of like an operator and it has the highest precedence	
(max 4) 5	ist 	max :: (Ord a) => a -> (a -> a)		  
oder:
multThree 3 5 9 or ((multThree 3) 5) 9
multThree :: (Num a) => a -> (a -> (a -> a))

Fold
----
A fold takes a binary function, a starting value (I like to call it the accumulator) 
and a list to fold up. The binary function itself takes two parameters. The binary 
function is called with the accumulator and the first (or last) element and produces
a new accumulator. Then, the binary function is called again with the new accumulator
and the now new first (or last) element, and so on. Once we've walked over the whole
list, only the accumulator remains, which is what we've reduced the list to.
